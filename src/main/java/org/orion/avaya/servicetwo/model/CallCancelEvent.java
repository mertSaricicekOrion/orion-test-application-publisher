package org.orion.avaya.servicetwo.model; /**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class CallCancelEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"org.orion.avaya.servicetwo.model.CallCancelEvent\",\"fields\":[{\"name\":\"reason\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
    private static final long serialVersionUID = 5475750607506853081L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<CallCancelEvent> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<CallCancelEvent> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<CallCancelEvent>
            WRITER$ = (org.apache.avro.io.DatumWriter<CallCancelEvent>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<CallCancelEvent>
            READER$ = (org.apache.avro.io.DatumReader<CallCancelEvent>) MODEL$.createDatumReader(SCHEMA$);
    private java.lang.CharSequence reason;
    private java.lang.CharSequence timestamp;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public CallCancelEvent() {
    }

    /**
     * All-args constructor.
     * @param reason The new value for reason
     * @param timestamp The new value for timestamp
     */
    public CallCancelEvent(java.lang.CharSequence reason, java.lang.CharSequence timestamp) {
        this.reason = reason;
        this.timestamp = timestamp;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<CallCancelEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<CallCancelEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<CallCancelEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a org.orion.avaya.servicetwo.model.CallCancelEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a org.orion.avaya.servicetwo.model.CallCancelEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static CallCancelEvent fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new org.orion.avaya.servicetwo.model.CallCancelEvent RecordBuilder.
     * @return A new org.orion.avaya.servicetwo.model.CallCancelEvent RecordBuilder
     */
    public static CallCancelEvent.Builder newBuilder() {
        return new CallCancelEvent.Builder();
    }

    /**
     * Creates a new org.orion.avaya.servicetwo.model.CallCancelEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new org.orion.avaya.servicetwo.model.CallCancelEvent RecordBuilder
     */
    public static CallCancelEvent.Builder newBuilder(CallCancelEvent.Builder other) {
        if (other == null) {
            return new CallCancelEvent.Builder();
        } else {
            return new CallCancelEvent.Builder(other);
        }
    }

    /**
     * Creates a new org.orion.avaya.servicetwo.model.CallCancelEvent RecordBuilder by copying an existing org.orion.avaya.servicetwo.model.CallCancelEvent instance.
     * @param other The existing instance to copy.
     * @return A new org.orion.avaya.servicetwo.model.CallCancelEvent RecordBuilder
     */
    public static CallCancelEvent.Builder newBuilder(CallCancelEvent other) {
        if (other == null) {
            return new CallCancelEvent.Builder();
        } else {
            return new CallCancelEvent.Builder(other);
        }
    }

    /**
     * Serializes this org.orion.avaya.servicetwo.model.CallCancelEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return reason;
            case 1:
                return timestamp;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                reason = (java.lang.CharSequence) value$;
                break;
            case 1:
                timestamp = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'reason' field.
     * @return The value of the 'reason' field.
     */
    public java.lang.CharSequence getReason() {
        return reason;
    }

    /**
     * Sets the value of the 'reason' field.
     * @param value the value to set.
     */
    public void setReason(java.lang.CharSequence value) {
        this.reason = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value of the 'timestamp' field.
     */
    public java.lang.CharSequence getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.CharSequence value) {
        this.timestamp = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.reason);

        out.writeString(this.timestamp);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.reason = in.readString(this.reason instanceof Utf8 ? (Utf8) this.reason : null);

            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8) this.timestamp : null);

        } else {
            for (int i = 0; i < 2; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.reason = in.readString(this.reason instanceof Utf8 ? (Utf8) this.reason : null);
                        break;

                    case 1:
                        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8) this.timestamp : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for org.orion.avaya.servicetwo.model.CallCancelEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CallCancelEvent>
            implements org.apache.avro.data.RecordBuilder<CallCancelEvent> {

        private java.lang.CharSequence reason;
        private java.lang.CharSequence timestamp;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(CallCancelEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.reason)) {
                this.reason = data().deepCopy(fields()[0].schema(), other.reason);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing org.orion.avaya.servicetwo.model.CallCancelEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(CallCancelEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.reason)) {
                this.reason = data().deepCopy(fields()[0].schema(), other.reason);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'reason' field.
         * @return The value.
         */
        public java.lang.CharSequence getReason() {
            return reason;
        }


        /**
         * Sets the value of the 'reason' field.
         * @param value The value of 'reason'.
         * @return This builder.
         */
        public CallCancelEvent.Builder setReason(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.reason = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'reason' field has been set.
         * @return True if the 'reason' field has been set, false otherwise.
         */
        public boolean hasReason() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'reason' field.
         * @return This builder.
         */
        public CallCancelEvent.Builder clearReason() {
            reason = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * @return The value.
         */
        public java.lang.CharSequence getTimestamp() {
            return timestamp;
        }


        /**
         * Sets the value of the 'timestamp' field.
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public CallCancelEvent.Builder setTimestamp(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.timestamp = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * @return This builder.
         */
        public CallCancelEvent.Builder clearTimestamp() {
            timestamp = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public CallCancelEvent build() {
            try {
                CallCancelEvent record = new CallCancelEvent();
                record.reason = fieldSetFlags()[0] ? this.reason : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










