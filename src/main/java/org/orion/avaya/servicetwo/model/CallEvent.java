package org.orion.avaya.servicetwo.model; /**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class CallEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"org.orion.avaya.servicetwo.model.CallEvent\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"telephoneNumber\",\"type\":\"string\"},{\"name\":\"locale\",\"type\":\"string\"},{\"name\":\"trunkName\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"callStatus\",\"type\":{\"type\":\"enum\",\"name\":\"org.orion.avaya.servicetwo.model.CallStatus\",\"symbols\":[\"INVITED\",\"ACTIVE\",\"PROCESSED\",\"CANCELED\",\"ENDED\",\"ERROR\"]}}]}");
    private static final long serialVersionUID = -2606840088708611418L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<CallEvent> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<CallEvent> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<CallEvent>
            WRITER$ = (org.apache.avro.io.DatumWriter<CallEvent>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<CallEvent>
            READER$ = (org.apache.avro.io.DatumReader<CallEvent>) MODEL$.createDatumReader(SCHEMA$);
    private long id;
    private java.lang.CharSequence telephoneNumber;
    private java.lang.CharSequence locale;
    private java.lang.CharSequence trunkName;
    private java.lang.CharSequence timestamp;
    private CallStatus callStatus;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public CallEvent() {
    }
    /**
     * All-args constructor.
     * @param id The new value for id
     * @param telephoneNumber The new value for telephoneNumber
     * @param locale The new value for locale
     * @param trunkName The new value for trunkName
     * @param timestamp The new value for timestamp
     * @param callStatus The new value for callStatus
     */
    public CallEvent(java.lang.Long id, java.lang.CharSequence telephoneNumber, java.lang.CharSequence locale, java.lang.CharSequence trunkName, java.lang.CharSequence timestamp, CallStatus callStatus) {
        this.id = id;
        this.telephoneNumber = telephoneNumber;
        this.locale = locale;
        this.trunkName = trunkName;
        this.timestamp = timestamp;
        this.callStatus = callStatus;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<CallEvent> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<CallEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<CallEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a org.orion.avaya.servicetwo.model.CallEvent from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a org.orion.avaya.servicetwo.model.CallEvent instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static CallEvent fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new org.orion.avaya.servicetwo.model.CallEvent RecordBuilder.
     * @return A new org.orion.avaya.servicetwo.model.CallEvent RecordBuilder
     */
    public static CallEvent.Builder newBuilder() {
        return new CallEvent.Builder();
    }

    /**
     * Creates a new org.orion.avaya.servicetwo.model.CallEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new org.orion.avaya.servicetwo.model.CallEvent RecordBuilder
     */
    public static CallEvent.Builder newBuilder(CallEvent.Builder other) {
        if (other == null) {
            return new CallEvent.Builder();
        } else {
            return new CallEvent.Builder(other);
        }
    }

    /**
     * Creates a new org.orion.avaya.servicetwo.model.CallEvent RecordBuilder by copying an existing org.orion.avaya.servicetwo.model.CallEvent instance.
     * @param other The existing instance to copy.
     * @return A new org.orion.avaya.servicetwo.model.CallEvent RecordBuilder
     */
    public static CallEvent.Builder newBuilder(CallEvent other) {
        if (other == null) {
            return new CallEvent.Builder();
        } else {
            return new CallEvent.Builder(other);
        }
    }

    /**
     * Serializes this org.orion.avaya.servicetwo.model.CallEvent to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return telephoneNumber;
            case 2:
                return locale;
            case 3:
                return trunkName;
            case 4:
                return timestamp;
            case 5:
                return callStatus;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.Long) value$;
                break;
            case 1:
                telephoneNumber = (java.lang.CharSequence) value$;
                break;
            case 2:
                locale = (java.lang.CharSequence) value$;
                break;
            case 3:
                trunkName = (java.lang.CharSequence) value$;
                break;
            case 4:
                timestamp = (java.lang.CharSequence) value$;
                break;
            case 5:
                callStatus = (CallStatus) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(long value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'telephoneNumber' field.
     * @return The value of the 'telephoneNumber' field.
     */
    public java.lang.CharSequence getTelephoneNumber() {
        return telephoneNumber;
    }

    /**
     * Sets the value of the 'telephoneNumber' field.
     * @param value the value to set.
     */
    public void setTelephoneNumber(java.lang.CharSequence value) {
        this.telephoneNumber = value;
    }

    /**
     * Gets the value of the 'locale' field.
     * @return The value of the 'locale' field.
     */
    public java.lang.CharSequence getLocale() {
        return locale;
    }

    /**
     * Sets the value of the 'locale' field.
     * @param value the value to set.
     */
    public void setLocale(java.lang.CharSequence value) {
        this.locale = value;
    }

    /**
     * Gets the value of the 'trunkName' field.
     * @return The value of the 'trunkName' field.
     */
    public java.lang.CharSequence getTrunkName() {
        return trunkName;
    }

    /**
     * Sets the value of the 'trunkName' field.
     * @param value the value to set.
     */
    public void setTrunkName(java.lang.CharSequence value) {
        this.trunkName = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value of the 'timestamp' field.
     */
    public java.lang.CharSequence getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.CharSequence value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'callStatus' field.
     * @return The value of the 'callStatus' field.
     */
    public CallStatus getCallStatus() {
        return callStatus;
    }

    /**
     * Sets the value of the 'callStatus' field.
     * @param value the value to set.
     */
    public void setCallStatus(CallStatus value) {
        this.callStatus = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeLong(this.id);

        out.writeString(this.telephoneNumber);

        out.writeString(this.locale);

        out.writeString(this.trunkName);

        out.writeString(this.timestamp);

        out.writeEnum(this.callStatus.ordinal());

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.id = in.readLong();

            this.telephoneNumber = in.readString(this.telephoneNumber instanceof Utf8 ? (Utf8) this.telephoneNumber : null);

            this.locale = in.readString(this.locale instanceof Utf8 ? (Utf8) this.locale : null);

            this.trunkName = in.readString(this.trunkName instanceof Utf8 ? (Utf8) this.trunkName : null);

            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8) this.timestamp : null);

            this.callStatus = CallStatus.values()[in.readEnum()];

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.id = in.readLong();
                        break;

                    case 1:
                        this.telephoneNumber = in.readString(this.telephoneNumber instanceof Utf8 ? (Utf8) this.telephoneNumber : null);
                        break;

                    case 2:
                        this.locale = in.readString(this.locale instanceof Utf8 ? (Utf8) this.locale : null);
                        break;

                    case 3:
                        this.trunkName = in.readString(this.trunkName instanceof Utf8 ? (Utf8) this.trunkName : null);
                        break;

                    case 4:
                        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8) this.timestamp : null);
                        break;

                    case 5:
                        this.callStatus = CallStatus.values()[in.readEnum()];
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for org.orion.avaya.servicetwo.model.CallEvent instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CallEvent>
            implements org.apache.avro.data.RecordBuilder<CallEvent> {

        private long id;
        private java.lang.CharSequence telephoneNumber;
        private java.lang.CharSequence locale;
        private java.lang.CharSequence trunkName;
        private java.lang.CharSequence timestamp;
        private CallStatus callStatus;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(CallEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.telephoneNumber)) {
                this.telephoneNumber = data().deepCopy(fields()[1].schema(), other.telephoneNumber);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.locale)) {
                this.locale = data().deepCopy(fields()[2].schema(), other.locale);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.trunkName)) {
                this.trunkName = data().deepCopy(fields()[3].schema(), other.trunkName);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.callStatus)) {
                this.callStatus = data().deepCopy(fields()[5].schema(), other.callStatus);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing org.orion.avaya.servicetwo.model.CallEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(CallEvent other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.telephoneNumber)) {
                this.telephoneNumber = data().deepCopy(fields()[1].schema(), other.telephoneNumber);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.locale)) {
                this.locale = data().deepCopy(fields()[2].schema(), other.locale);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.trunkName)) {
                this.trunkName = data().deepCopy(fields()[3].schema(), other.trunkName);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.callStatus)) {
                this.callStatus = data().deepCopy(fields()[5].schema(), other.callStatus);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public long getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public CallEvent.Builder setId(long value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public CallEvent.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'telephoneNumber' field.
         * @return The value.
         */
        public java.lang.CharSequence getTelephoneNumber() {
            return telephoneNumber;
        }


        /**
         * Sets the value of the 'telephoneNumber' field.
         * @param value The value of 'telephoneNumber'.
         * @return This builder.
         */
        public CallEvent.Builder setTelephoneNumber(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.telephoneNumber = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'telephoneNumber' field has been set.
         * @return True if the 'telephoneNumber' field has been set, false otherwise.
         */
        public boolean hasTelephoneNumber() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'telephoneNumber' field.
         * @return This builder.
         */
        public CallEvent.Builder clearTelephoneNumber() {
            telephoneNumber = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'locale' field.
         * @return The value.
         */
        public java.lang.CharSequence getLocale() {
            return locale;
        }


        /**
         * Sets the value of the 'locale' field.
         * @param value The value of 'locale'.
         * @return This builder.
         */
        public CallEvent.Builder setLocale(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.locale = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'locale' field has been set.
         * @return True if the 'locale' field has been set, false otherwise.
         */
        public boolean hasLocale() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'locale' field.
         * @return This builder.
         */
        public CallEvent.Builder clearLocale() {
            locale = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'trunkName' field.
         * @return The value.
         */
        public java.lang.CharSequence getTrunkName() {
            return trunkName;
        }


        /**
         * Sets the value of the 'trunkName' field.
         * @param value The value of 'trunkName'.
         * @return This builder.
         */
        public CallEvent.Builder setTrunkName(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.trunkName = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'trunkName' field has been set.
         * @return True if the 'trunkName' field has been set, false otherwise.
         */
        public boolean hasTrunkName() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'trunkName' field.
         * @return This builder.
         */
        public CallEvent.Builder clearTrunkName() {
            trunkName = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * @return The value.
         */
        public java.lang.CharSequence getTimestamp() {
            return timestamp;
        }


        /**
         * Sets the value of the 'timestamp' field.
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public CallEvent.Builder setTimestamp(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.timestamp = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * @return This builder.
         */
        public CallEvent.Builder clearTimestamp() {
            timestamp = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'callStatus' field.
         * @return The value.
         */
        public CallStatus getCallStatus() {
            return callStatus;
        }


        /**
         * Sets the value of the 'callStatus' field.
         * @param value The value of 'callStatus'.
         * @return This builder.
         */
        public CallEvent.Builder setCallStatus(CallStatus value) {
            validate(fields()[5], value);
            this.callStatus = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'callStatus' field has been set.
         * @return True if the 'callStatus' field has been set, false otherwise.
         */
        public boolean hasCallStatus() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'callStatus' field.
         * @return This builder.
         */
        public CallEvent.Builder clearCallStatus() {
            callStatus = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public CallEvent build() {
            try {
                CallEvent record = new CallEvent();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
                record.telephoneNumber = fieldSetFlags()[1] ? this.telephoneNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.locale = fieldSetFlags()[2] ? this.locale : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.trunkName = fieldSetFlags()[3] ? this.trunkName : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.callStatus = fieldSetFlags()[5] ? this.callStatus : (CallStatus) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










